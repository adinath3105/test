1) what is javascript?

ans:JavaScript is a high-level, dynamic programming language primarily used to create interactive and dynamic content on websites.it use on both client side as well as server side for develop backend and frontend application.

2)what are datatype supported by js?
ans : in js there are two types of datatype primitive and non primitive datatypes

      primitive datatypes are :number,string,boolean,undefined,null,symbol
      non primitive datatype are : object and array



3) what is difference between let const and var?

var : 1) Variables declared with var are limited to the function in which they are declared.
      2) If declared outside a function, they become global variables.
      3) var variable hoisted and declare as an undefined and also var variable can reassign.

let : 1) let has block scope and its also reassigned
      2) let declarations are hoisted, but they remain in a "temporal dead zone".

const : 1)like let const also have block scope but it not reassign.
	2)Similar to let, const declarations are hoisted but remain in the "temporal dead zone."


4) explain '=='and '==='?
ans : double equal only check the value on left and right side.but triple equal check both the value and its datatype also.


5) what is closure ?
ans : A closure in JavaScript is a function that "remembers" its lexical scope, even when the function is executed outside that scope. It enables the function to access variables declared in its outer function, even after the outer function has finished executing.


6) what is hoisting?
ans : Hoisting in JavaScript is a behavior where variable and function declarations are moved ("hoisted") to the top of their containing scope during the compilation phase, before the code is executed. This allows you to use variables and functions before they are declared in the code.


7)explain 'this' in js?

ans : In JavaScript, this refers to the object that is currently executing a function.if in object you have normal function this refer that object.but if we have arrow function this refer global object.


8)what are javascript prototype?

ans : Every JavaScript object has an internal link to another object called its prototype, and this chain of prototypes forms the prototype chain. Prototypes enable the sharing of methods and properties across instances without duplicating them in memory.

like array.push() etc methods so here push is prototype of array.


9) what is the difference between null and undefined?

ans : 1) null : null represent no value or empty value.type of null is object used to assign empty or nullified value.
       2) undefined : means variable is declare but no value assign to it that time the value of this variable is undefined.type of             	undefined is undefined


10) how does js handle async operations?
ans : js handle async operations using promise and async await


11) what is promise ?
ans : promise is a js object that represent the completion of asynchronous operation.promise we use to avoid callbackhell
it has 3 state in promise fulfilled,pendig,reject.


12)what are async and await ?

ans : to overcome the promise chaining async await intoduce.they provide a cleaner and more readable syntax for handling asynchronous code.

13)what is event deligation in js?

ans : Event delegation in JavaScript is a technique used to handle events more efficiently by taking advantage of the event bubbling mechanism. Instead of attaching event listeners to individual child elements, you attach the event listener to a parent element. This parent element listens for events that bubble up from its child elements, and based on the event's target, the appropriate action is performed.

ex.  		 <ul id="myList">
 		 <li class="list-item">Item 1</li>
  		<li class="list-item">Item 2</li>
  		<li class="list-item">Item 3</li>
		</ul>

		document.addEventListener('click', function(event) {
  			if (event.target.classList.contains('list-item')) {
  			  console.log('Clicked on list item:', event.target.textContent);
  							}
						});


14)what are JavaScript modules?
Ans : JavaScript modules are a way to organize and structure code by breaking it into smaller, reusable pieces. They allow you to divide your JavaScript code into separate files, each representing a module, and import/export functionality between them. This helps in keeping code maintainable, readable, and reusable, especially in large-scale applications.


15)how can we prevent function from called multiple times?

Ans: using flag we can reduce and also session or local storage we use to handle this situation.


16) what is the event loop?

Ans : is handle all async operation in js because js is single thread.it checks callstack once callstack is empty it push async operation as per priority in callstack.and execute one by one all operations.

17)what is difference between apply and call method ?

Ans : when we have one object in that object we have one function and if we want to create one more object and we want to use previous object function in this object that time we use call() and apply() methods.in call we pass paramters as comma separated ex.obj2.call(obj.getdata,'abc',23).and in apply() we pass parameters as as array ex.obj2.apply(obj.getdata,['abc',23])



18)what is bind method used for ?

Ans : The bind() method does not execute the function immediately. Instead, it returns a new function


19)what is JavaScript event loop?
Ans : js event loop manage synchronas and asynchronous code execution in js.it check every time if callstack is empty it will check if there is any task is available in microtask que. if not any task present in this queu then it will check in callback queu if there is any callback and execute that callback in callstack


20) explain the concept of event bubbling and event capturing?

Ans :
 
event bubbling : 

for example if we have two dom element is html ex.
<div id="parent">
  <button id="child">Click me</button>
</div>

<script>
  document.getElementById("parent").addEventListener("click", function() {
    alert("Parent clicked");
  });

  document.getElementById("child").addEventListener("click", function() {
    alert("Child clicked");
  });
</script>


in this scenario when we click on child element that time child element event is triggered then it also fire parent dom event.it will fire all eventlistener till not goes to window/dom object is called event bubbling.


event capturing : 

		it opposite to event bubbling is start from parent event listner till target element

		<div id="parent">
 			 <button id="child">Click me</button>
		</div>

		<script>
  			document.getElementById("parent").addEventListener("click", function() {
   			 alert("Parent clicked");
  			}, true); // true indicates event capturing

  			document.getElementById("child").addEventListener("click", function() {
   			 alert("Child clicked");
  			});
		</script>

in this scenario when we click on child element it first fire parent element event listener then it goes till child event listener.



21) what is diff between shallow copy and deep copy?

Ans : 
	1)shallow copy:when we copy in array in another variable like using rest and spred.if we change any in copy array it will affect on original array ALso
		ex.	// Original object
			const original = { a: 1, b: { c: 2 } };

				// Shallow copy
			const shallowCopy = { ...original };

			// Modify nested object
			shallowCopy.b.c = 42;

			console.log(original.b.c); // Output: 42 (affected by change in shallowCopy)
			console.log(shallowCopy.b.c); // Output: 42


		
	2)deep copy : when we create copy of array in deep copy it not affect on each and other when we change anything in any array
		ex . // Original object
			const original = { a: 1, b: { c: 2 } };

			// Deep copy (e.g., using JSON methods)
			const deepCopy = JSON.parse(JSON.stringify(original));

			// Modify nested object
			deepCopy.b.c = 42;

			console.log(original.b.c); // Output: 2 (not affected)
			console.log(deepCopy.b.c); // Output: 42



22) what are generator function ?

Ans : In JavaScript, a generator function is a special type of function that allows you to pause and resume execution, producing a sequence of values on demand. It is defined using the function* syntax and can yield multiple values using the yield keyword.


23)what is the use of new keyword?
Ans:  new keyword is used to create instances of an object that are defined by constructor function or classes.


24) how settimeout and setinterval work in js?
Ans : setTimeout is used to execute a function once after a specified delay.
ex.setTimeout(callback, delay, ...args);

setInterval is used to repeatedly execute a function at a fixed time interval until it is explicitly stopped.
ex.setInterval(callback, interval, ...args);


25) what is Set in js?
Ans : In JavaScript, a Set is a collection of unique values. It allows you to store and manage data without duplicates

const mySet = new Set([1, 2, 3, 3, 4]);
console.log(mySet); // Output: Set(4) { 1, 2, 3, 4 }


26)what is 'Object.create()' is used for ?
Ans : In JavaScript, Object.create() is a method used to create a new object with a specified prototype. It allows you to set the prototype of the newly created object explicitly and optionally add properties to the new object.

const parent = {
  greet() {
    console.log("Hello from parent!");
  },
};

const child = Object.create(parent);
child.greet(); // Output: "Hello from parent!"

console.log(Object.getPrototypeOf(child) === parent); // Output: true


27)how does js garbage collection works?
Ans : JavaScriptâ€™s garbage collection (GC) mechanism is responsible for automatically managing memory by reclaiming memory used by objects that are no longer accessible or needed. This process ensures efficient use of memory and prevents memory leaks.


28) explain the difference between prototype and '_proto_'?







































	

  
